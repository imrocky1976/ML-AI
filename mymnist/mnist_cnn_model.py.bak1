"""A MNIST CNN network model contains inference, train, loss and evaluation."""

import tensorflow as tf
import math

# The MNIST dataset has 10 classes, representing the digits 0 through 9.
NUM_CLASSES = 10

# The MNIST images are always 28x28 pixels.
IMAGE_SIZE = 28
IMAGE_PIXELS = IMAGE_SIZE * IMAGE_SIZE


def inference(images, keep_prob):
    """Builds the graph for a deep net for classifying digits.

    Args:
      images: An input tensor with the dimensions (N_examples, IMAGE_HEIGHT, IMAGE_WIDTH, IMAGE_CHANNEL).
      keep_prob: A scalar placeholder for the probability of dropout.

    Returns:
      A tensor of shape (N_examples, 10), with values
      equal to the logits of classifying the digit into one of 10 classes (the digits 0-9).
    """

    # First convolutional layer - maps one grayscale image to 32 feature maps.
    with tf.name_scope('conv1'):
        W_conv1 = weight_variable([5, 5, 1, 32])
        b_conv1 = bias_variable([32])
        h_conv1 = tf.nn.relu(conv2d(images, W_conv1) + b_conv1)  # [-1, 28, 28, 32]

    # Pooling layer - downsamples by 2X.
    with tf.name_scope('pool1'):
        h_pool1 = max_pool_2x2(h_conv1)  # [-1, 14, 14, 32]

    # Second convolutional layer -- maps 32 feature maps to 64.
    with tf.name_scope('conv2'):
        W_conv2 = weight_variable([5, 5, 32, 64])
        b_conv2 = bias_variable([64])
        h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)  # [-1, 14, 14, 64]

    # Second pooling layer.
    with tf.name_scope('pool2'):
        h_pool2 = max_pool_2x2(h_conv2)  # [-1, 7, 7, 64]

    # Fully connected layer 1 -- after 2 round of downsampling, our 28x28 image
    # is down to 7x7x64 feature maps -- maps this to 1024 features.
    with tf.name_scope('fc1'):
        W_fc1 = weight_variable([7 * 7 * 64, 1024])
        b_fc1 = bias_variable([1024])

        h_pool2_flat = tf.reshape(h_pool2, [-1, 7 * 7 * 64])
        h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)  # [-1, 1024]

    # Dropout - controls the complexity of the model, prevents co-adaptation of
    # features.
    with tf.name_scope('dropout'):
        h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)

    # Map the 1024 features to 10 classes, one for each digit
    with tf.name_scope('fc2'):
        W_fc2 = weight_variable([1024, 10])
        b_fc2 = bias_variable([10])

        logits = tf.matmul(h_fc1_drop, W_fc2) + b_fc2  # [-1, 10]
    return logits


def conv2d(x, W):
    """conv2d returns a 2d convolution layer with full stride."""
    return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')


def max_pool_2x2(x):
    """max_pool_2x2 downsamples a feature map by 2X."""
    return tf.nn.max_pool(x, ksize=[1, 2, 2, 1],
                          strides=[1, 2, 2, 1], padding='SAME')


def weight_variable(shape):
    """weight_variable generates a weight variable of a given shape."""
    initial = tf.truncated_normal(shape, stddev=0.1)
    return tf.Variable(initial)


def bias_variable(shape):
    """bias_variable generates a bias variable of a given shape."""
    initial = tf.constant(0.1, shape=shape)
    return tf.Variable(initial)


def loss(logits, labels):
    labels = tf.to_int32(labels)
    xentropy = tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits, labels=labels, name='xentropy')
    return tf.reduce_mean(xentropy, name='xentropy_mean')


def train(total_loss, learning_rate=0.01):
    tf.summary.scalar('total_loss', total_loss)
    return tf.train.GradientDescentOptimizer(learning_rate).minimize(total_loss)


def evaluation(logits, labels):
    correct = tf.nn.in_top_k(logits, labels, 1)
    correct_num = tf.reduce_sum(tf.to_float(correct))
    return correct_num / tf.cast(tf.shape(labels)[0], tf.float32)
